
Ingress (like Nginx) - Это L7 сущность, с URL SSL-termination and loadbalancing:
для того, чтобы выставить наружу нужен Ingress controller 

Service:
        -> Pods (select by label)
        -> EndPoint (to external service)
        -> another Namespace
In order for the Ingress resource to work, the cluster must have an Ingress controller running. 
The Ingress controller is responsible for fulfilling the Ingress dynamically by watching the ApiServer’s /ingresses endpoint.

Service - можно выставить напрямую при помощи ServiceTypes:
 - ClusterIP: Exposes the service on a cluster-internal IP. Choosing this value makes the service only reachable from within the cluster. This is the default ServiceType.
 - NodePort: (выставляет наружу) Exposes the service on each Node’s IP at a static port (the NodePort). A ClusterIP service, to which the NodePort service will route, is automatically created. You’ll be able to contact the NodePort service, from outside the cluster, by requesting <NodeIP>:<NodePort>.
 - LoadBalancer: Exposes the service externally using a cloud provider’s load balancer. NodePort and ClusterIP services, to which the external load balancer will route, are automatically created.
 - ExternalName: Maps the service to the contents of the externalName field (e.g. foo.bar.example.com), by returning a CNAME record with its value. No proxying of any kind is set up. This requires version 1.7 or higher of kube-dns.

Deployment - рекомендованная замена для Replica-set
Replica-set - рекомендованная замена для Replication-controller 
   -> Pods (select by label)

Daemon-set: - под на каждой ноде (например мониторинг нод). можно через nodeSelector указывать ноды выборочно
HPA - автомасштабирование подов. (min=2, max=6, cpu-usage=70%)
ConfigMap - передача окружения для подов. из файлов.
StateFullSet -- был разработан на замену PetSets. Как вы можете угадать из его названия, поды сопровождают своё состояние как часть развёртывания. Они разработаны для того чтбы иметь:

You can manipulate labels for debugging. Because Kubernetes controllers (such as ReplicaSet) and Services match to Pods 
using selector labels, removing the relevant labels from a Pod will stop it from being considered by a controller 
or from being served traffic by a Service. 
If you remove the labels of an existing Pod, its controller will create a new Pod to take its place. 
This is a useful way to debug a previously “live” Pod in a “quarantine” environment. 
To interactively remove or add labels, use kubectl label.


We don’t want any other pod to be scheduled to this node so we set --register-schedulable=false 
when running the kubelet as well as giving it a convenient label: --node-labels=edge-router.
Kubernetes will run DaemonSets on every node of the cluster even if they are non-schedulable. 
We only want this DaemonSet to run on the edge-router node so we use “nodeSelector” to match the label we previously added.

deprecated way to have Kubernetes always pull the image is to use the :latest tag, 
which will implicitly set the imagePullPolicy to Always.

Ссылки:
https://capgemini.github.io/kubernetes/kube-traefik/
Configure Access to Multiple Clusters

Внятная документация на русском языке
http://support.mdl.ru/KubernetesServerlessApplications/content/Ch02.html#01

HELM teplates:
https://docs.helm.sh/chart_template_guide

Хороший видос: https://habr.com/company/jugru/blog/416161/
Жизнь пода: https://habr.com/company/flant/blog/415393/ 
Taints and Tolerations (чтобы выделить одну ноду только под ингресы) https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
kubectl Cheat Sheet:  https://kubernetes.io/docs/reference/kubectl/cheatsheet/



https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#resource-operations
